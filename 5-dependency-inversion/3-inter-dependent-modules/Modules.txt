
// team A  depends on services from team B
// this leads to a number of issues
// 1. Team A is directly affected by the schedule of team B
// 2. Team A has no control over the interfaces and the semantics of the services
// 3. Team A can't finish before team B


// team A now depends on three internal abstractions mitigating these issues
moduleA {
	abstract Service1; // fakes may be implemented on these services
	abstract Service2;
	abstract Service3;
}

// Now team B depends upon team A
moduleB {
	Service1Impl{}
	Service2Impl{}
	Service3Impl{}
}