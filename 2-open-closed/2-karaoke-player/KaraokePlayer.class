enum PlayerState {
	IDLE, PLAY_KARAOKE, PLAY_RECORDING, PAUSED
	// etc. 
}

public class KaraokePlayer {

	PlayerState state;

	// Application functionality (responsibilities)
	// 1. Parse the lyrics file - LIKELY TO CHANGE (Format change, multiple formats)
	// 2. Parse the lyrics' timings file - LIKELY TO CHANGE (Format change, multiple formats)
	// 3. Play the karaoke video file - No change expected
	// 4. Overlay the lyrics over the video on the screen and sync with sound - VERY LIKELY TO CHANGE (business requirements?)
	// 5. Record singer's voice  - No change expected
	// 6. Pause - No change expected
	// 7. Stop - No change expected
	// 8. Listen to the recording - VERY LIKELY TO CHANGE

	AudioPlayer audioPlayer;
	VideoPlayer videoPlayer;
	AudioRecorder audioRecorder;

	// Use open-closed principle to prepare for change
	// In lyrics parsing formats
	LyricsParserFactory lyricsParserFactory;	
	LyricsParserAbstraction lyricsParserAbstraction;
	
	TimingsParser timingsParser; // Apply same to this ONLY if it is likely to change
	LyricsTextPlayer lyricsTextPlayer; // Apply same to this ONLY if it is likely to change


	RecordingsManager recordingsManager;

} 

// Add implementations of lyrics parser abstraction 
public class LyricsParserFormat1 implements LyricsParserAbstraction {
	//
}

// Add factory to construct different implementations of lyrics parser abstractions
public class LyricsParserFactory {...}


public class RecordingsPlayer {

	RecordingsManager recordingsManager;
}
