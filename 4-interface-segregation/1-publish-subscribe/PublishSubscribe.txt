// Source must publish to target without depending upon it
class Source {
	// Source depends on EventBus publisher
	// Whenever it calls publish(Event) message will be sent to target
}

// Note: Event buses can make your code unmaintainable
// Opinion: Classes that are both publishers and subscribers are a code smell
class EventBus {
	// EventBus depends upon subscriber abstration
	+ subscribe(Subscriber)
	+ unsubscribe(Subscriber)
	+ publish(Event)
}

class EventBusPublisher {
	// Delegates publish to EventBus
	+ publish(Event)
}

class EventBusSubscriber {
	// Delegates methods to EventBus
	+ subscribe(Subscriber)
	+ unsubscribe(Subscriber)
}

interface Subscriber {
	+ onEvent(event)
}


class Target implements Subscriber {
	// Target depends upon EventBusSubscriber and subscribes / unsubscribes
	// ex. EventBusSubscriber eventBusSubscriber.subscribe(this)
	
	// Target realizes subscriber (through implementation)
	+ onEvent(event)
}