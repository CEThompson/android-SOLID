// Both systems communicate with each other
Main System {} // ex. front end
System X {} // ex. backend

public class XService {
	+ registerListener(Listener)
	+ unregisterListener(Listener)
}

interface XListener {
	void onMessageA()
	void onMessageB()
	void onMessageC()
	void onMessageD()
}

class MessageADispatcher implements XListener {
	private XService sService; // constructed
	public MessageADispatcher(XService xService){
		this.xService = xService;
	}
	public void init() {
		xService.registerListener(this);
	}
	public void registerListener(MessageAListener listener) {...}
	public void unregisterListener(MessageAListener listener) {...}

	@Override
	public void onMessageA(){
		// notify listeners about a
	}
	@Override
	public void onMessageB(){
		// do nothing
	}
	@Override
	public void onMessageC(){	
		// do nothing
	}
	@Override
	public void onMessageD(){
		// do nothing
	}	
}

// Create similar dispatchers for B, C, D

// Create interfaces
public interface MessageAListener {
	void onMessageA()
}

// Now client1 does not implement unused overrides
class Client1 implements MessageBListener {
	// Overrides
	void onMessageB()
}

class Client2 implements MessageAListener, MessageBListener {
	// Overrides
	void onMessageA()
	void onMessageB()
}